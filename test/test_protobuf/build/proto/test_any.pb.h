// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_any.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fany_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fany_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fany_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fany_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fany_2eproto;
class AnyMessage;
class AnyMessageDefaultTypeInternal;
extern AnyMessageDefaultTypeInternal _AnyMessage_default_instance_;
class OneofMsg;
class OneofMsgDefaultTypeInternal;
extern OneofMsgDefaultTypeInternal _OneofMsg_default_instance_;
class TestOne;
class TestOneDefaultTypeInternal;
extern TestOneDefaultTypeInternal _TestOne_default_instance_;
class TestTwo;
class TestTwoDefaultTypeInternal;
extern TestTwoDefaultTypeInternal _TestTwo_default_instance_;
class TestTwo_KVItemEntry_DoNotUse;
class TestTwo_KVItemEntry_DoNotUseDefaultTypeInternal;
extern TestTwo_KVItemEntry_DoNotUseDefaultTypeInternal _TestTwo_KVItemEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AnyMessage* Arena::CreateMaybeMessage<::AnyMessage>(Arena*);
template<> ::OneofMsg* Arena::CreateMaybeMessage<::OneofMsg>(Arena*);
template<> ::TestOne* Arena::CreateMaybeMessage<::TestOne>(Arena*);
template<> ::TestTwo* Arena::CreateMaybeMessage<::TestTwo>(Arena*);
template<> ::TestTwo_KVItemEntry_DoNotUse* Arena::CreateMaybeMessage<::TestTwo_KVItemEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TestOne :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestOne) */ {
 public:
  TestOne();
  virtual ~TestOne();

  TestOne(const TestOne& from);
  TestOne(TestOne&& from) noexcept
    : TestOne() {
    *this = ::std::move(from);
  }

  inline TestOne& operator=(const TestOne& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOne& operator=(TestOne&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestOne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestOne* internal_default_instance() {
    return reinterpret_cast<const TestOne*>(
               &_TestOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestOne& a, TestOne& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOne* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestOne* New() const final {
    return CreateMaybeMessage<TestOne>(nullptr);
  }

  TestOne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestOne>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestOne& from);
  void MergeFrom(const TestOne& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOne* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestOne";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fany_2eproto);
    return ::descriptor_table_test_5fany_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:TestOne)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fany_2eproto;
};
// -------------------------------------------------------------------

class AnyMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AnyMessage) */ {
 public:
  AnyMessage();
  virtual ~AnyMessage();

  AnyMessage(const AnyMessage& from);
  AnyMessage(AnyMessage&& from) noexcept
    : AnyMessage() {
    *this = ::std::move(from);
  }

  inline AnyMessage& operator=(const AnyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyMessage& operator=(AnyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyMessage* internal_default_instance() {
    return reinterpret_cast<const AnyMessage*>(
               &_AnyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnyMessage& a, AnyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyMessage* New() const final {
    return CreateMaybeMessage<AnyMessage>(nullptr);
  }

  AnyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyMessage& from);
  void MergeFrom(const AnyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AnyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fany_2eproto);
    return ::descriptor_table_test_5fany_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyFieldNumber = 1,
  };
  // .google.protobuf.Any any = 1;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const PROTOBUF_NAMESPACE_ID::Any& any() const;
  PROTOBUF_NAMESPACE_ID::Any* release_any();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any();
  void set_allocated_any(PROTOBUF_NAMESPACE_ID::Any* any);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_any() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_any();
  public:

  // @@protoc_insertion_point(class_scope:AnyMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* any_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fany_2eproto;
};
// -------------------------------------------------------------------

class OneofMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OneofMsg) */ {
 public:
  OneofMsg();
  virtual ~OneofMsg();

  OneofMsg(const OneofMsg& from);
  OneofMsg(OneofMsg&& from) noexcept
    : OneofMsg() {
    *this = ::std::move(from);
  }

  inline OneofMsg& operator=(const OneofMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneofMsg& operator=(OneofMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneofMsg& default_instance();

  enum MsgCase {
    kInt32Value = 1,
    kInt64Value = 2,
    kBoolValue = 3,
    kStringValue = 4,
    kAny = 5,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneofMsg* internal_default_instance() {
    return reinterpret_cast<const OneofMsg*>(
               &_OneofMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneofMsg& a, OneofMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OneofMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneofMsg* New() const final {
    return CreateMaybeMessage<OneofMsg>(nullptr);
  }

  OneofMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneofMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneofMsg& from);
  void MergeFrom(const OneofMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OneofMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fany_2eproto);
    return ::descriptor_table_test_5fany_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt32ValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kAnyFieldNumber = 5,
  };
  // int32 int_32_value = 1;
  private:
  bool _internal_has_int_32_value() const;
  public:
  void clear_int_32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_32_value() const;
  void set_int_32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_32_value() const;
  void _internal_set_int_32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int_64_value = 2;
  private:
  bool _internal_has_int_64_value() const;
  public:
  void clear_int_64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_64_value() const;
  void set_int_64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_64_value() const;
  void _internal_set_int_64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 3;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 4;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .google.protobuf.Any any = 5;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const PROTOBUF_NAMESPACE_ID::Any& any() const;
  PROTOBUF_NAMESPACE_ID::Any* release_any();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any();
  void set_allocated_any(PROTOBUF_NAMESPACE_ID::Any* any);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_any() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_any();
  public:

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:OneofMsg)
 private:
  class _Internal;
  void set_has_int_32_value();
  void set_has_int_64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_any();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 int_32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    PROTOBUF_NAMESPACE_ID::Any* any_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_test_5fany_2eproto;
};
// -------------------------------------------------------------------

class TestTwo_KVItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestTwo_KVItemEntry_DoNotUse, 
    std::string, ::OneofMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestTwo_KVItemEntry_DoNotUse, 
    std::string, ::OneofMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TestTwo_KVItemEntry_DoNotUse();
  TestTwo_KVItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestTwo_KVItemEntry_DoNotUse& other);
  static const TestTwo_KVItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestTwo_KVItemEntry_DoNotUse*>(&_TestTwo_KVItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TestTwo.KVItemEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fany_2eproto);
    return ::descriptor_table_test_5fany_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class TestTwo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestTwo) */ {
 public:
  TestTwo();
  virtual ~TestTwo();

  TestTwo(const TestTwo& from);
  TestTwo(TestTwo&& from) noexcept
    : TestTwo() {
    *this = ::std::move(from);
  }

  inline TestTwo& operator=(const TestTwo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTwo& operator=(TestTwo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestTwo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestTwo* internal_default_instance() {
    return reinterpret_cast<const TestTwo*>(
               &_TestTwo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestTwo& a, TestTwo& b) {
    a.Swap(&b);
  }
  inline void Swap(TestTwo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestTwo* New() const final {
    return CreateMaybeMessage<TestTwo>(nullptr);
  }

  TestTwo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestTwo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestTwo& from);
  void MergeFrom(const TestTwo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestTwo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestTwo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fany_2eproto);
    return ::descriptor_table_test_5fany_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKVItemFieldNumber = 1,
  };
  // map<string, .OneofMsg> k_v_item = 1;
  int k_v_item_size() const;
  private:
  int _internal_k_v_item_size() const;
  public:
  void clear_k_v_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >&
      _internal_k_v_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >*
      _internal_mutable_k_v_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >&
      k_v_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >*
      mutable_k_v_item();

  // @@protoc_insertion_point(class_scope:TestTwo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestTwo_KVItemEntry_DoNotUse,
      std::string, ::OneofMsg,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > k_v_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fany_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestOne

// string name = 1;
inline void TestOne::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestOne::name() const {
  // @@protoc_insertion_point(field_get:TestOne.name)
  return _internal_name();
}
inline void TestOne::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TestOne.name)
}
inline std::string* TestOne::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TestOne.name)
  return _internal_mutable_name();
}
inline const std::string& TestOne::_internal_name() const {
  return name_.GetNoArena();
}
inline void TestOne::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestOne::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestOne.name)
}
inline void TestOne::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestOne.name)
}
inline void TestOne::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestOne.name)
}
inline std::string* TestOne::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestOne::release_name() {
  // @@protoc_insertion_point(field_release:TestOne.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestOne::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TestOne.name)
}

// string data = 2;
inline void TestOne::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestOne::data() const {
  // @@protoc_insertion_point(field_get:TestOne.data)
  return _internal_data();
}
inline void TestOne::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TestOne.data)
}
inline std::string* TestOne::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TestOne.data)
  return _internal_mutable_data();
}
inline const std::string& TestOne::_internal_data() const {
  return data_.GetNoArena();
}
inline void TestOne::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestOne::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestOne.data)
}
inline void TestOne::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestOne.data)
}
inline void TestOne::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestOne.data)
}
inline std::string* TestOne::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestOne::release_data() {
  // @@protoc_insertion_point(field_release:TestOne.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestOne::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TestOne.data)
}

// -------------------------------------------------------------------

// AnyMessage

// .google.protobuf.Any any = 1;
inline bool AnyMessage::_internal_has_any() const {
  return this != internal_default_instance() && any_ != nullptr;
}
inline bool AnyMessage::has_any() const {
  return _internal_has_any();
}
inline const PROTOBUF_NAMESPACE_ID::Any& AnyMessage::_internal_any() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = any_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& AnyMessage::any() const {
  // @@protoc_insertion_point(field_get:AnyMessage.any)
  return _internal_any();
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::release_any() {
  // @@protoc_insertion_point(field_release:AnyMessage.any)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = any_;
  any_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::_internal_mutable_any() {
  
  if (any_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    any_ = p;
  }
  return any_;
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::mutable_any() {
  // @@protoc_insertion_point(field_mutable:AnyMessage.any)
  return _internal_mutable_any();
}
inline void AnyMessage::set_allocated_any(PROTOBUF_NAMESPACE_ID::Any* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_);
  }
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    
  } else {
    
  }
  any_ = any;
  // @@protoc_insertion_point(field_set_allocated:AnyMessage.any)
}

// -------------------------------------------------------------------

// OneofMsg

// int32 int_32_value = 1;
inline bool OneofMsg::_internal_has_int_32_value() const {
  return msg_case() == kInt32Value;
}
inline void OneofMsg::set_has_int_32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void OneofMsg::clear_int_32_value() {
  if (_internal_has_int_32_value()) {
    msg_.int_32_value_ = 0;
    clear_has_msg();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneofMsg::_internal_int_32_value() const {
  if (_internal_has_int_32_value()) {
    return msg_.int_32_value_;
  }
  return 0;
}
inline void OneofMsg::_internal_set_int_32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_32_value()) {
    clear_msg();
    set_has_int_32_value();
  }
  msg_.int_32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OneofMsg::int_32_value() const {
  // @@protoc_insertion_point(field_get:OneofMsg.int_32_value)
  return _internal_int_32_value();
}
inline void OneofMsg::set_int_32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_32_value(value);
  // @@protoc_insertion_point(field_set:OneofMsg.int_32_value)
}

// int64 int_64_value = 2;
inline bool OneofMsg::_internal_has_int_64_value() const {
  return msg_case() == kInt64Value;
}
inline void OneofMsg::set_has_int_64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void OneofMsg::clear_int_64_value() {
  if (_internal_has_int_64_value()) {
    msg_.int_64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_msg();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OneofMsg::_internal_int_64_value() const {
  if (_internal_has_int_64_value()) {
    return msg_.int_64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void OneofMsg::_internal_set_int_64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_64_value()) {
    clear_msg();
    set_has_int_64_value();
  }
  msg_.int_64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OneofMsg::int_64_value() const {
  // @@protoc_insertion_point(field_get:OneofMsg.int_64_value)
  return _internal_int_64_value();
}
inline void OneofMsg::set_int_64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_64_value(value);
  // @@protoc_insertion_point(field_set:OneofMsg.int_64_value)
}

// bool bool_value = 3;
inline bool OneofMsg::_internal_has_bool_value() const {
  return msg_case() == kBoolValue;
}
inline void OneofMsg::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void OneofMsg::clear_bool_value() {
  if (_internal_has_bool_value()) {
    msg_.bool_value_ = false;
    clear_has_msg();
  }
}
inline bool OneofMsg::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return msg_.bool_value_;
  }
  return false;
}
inline void OneofMsg::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_msg();
    set_has_bool_value();
  }
  msg_.bool_value_ = value;
}
inline bool OneofMsg::bool_value() const {
  // @@protoc_insertion_point(field_get:OneofMsg.bool_value)
  return _internal_bool_value();
}
inline void OneofMsg::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:OneofMsg.bool_value)
}

// string string_value = 4;
inline bool OneofMsg::_internal_has_string_value() const {
  return msg_case() == kStringValue;
}
inline void OneofMsg::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void OneofMsg::clear_string_value() {
  if (_internal_has_string_value()) {
    msg_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_msg();
  }
}
inline const std::string& OneofMsg::string_value() const {
  // @@protoc_insertion_point(field_get:OneofMsg.string_value)
  return _internal_string_value();
}
inline void OneofMsg::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:OneofMsg.string_value)
}
inline std::string* OneofMsg::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:OneofMsg.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& OneofMsg::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return msg_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OneofMsg::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_msg();
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  msg_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneofMsg::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:OneofMsg.string_value)
  if (!_internal_has_string_value()) {
    clear_msg();
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  msg_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneofMsg.string_value)
}
inline void OneofMsg::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_msg();
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  msg_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneofMsg.string_value)
}
inline void OneofMsg::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_msg();
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  msg_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneofMsg.string_value)
}
inline std::string* OneofMsg::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_msg();
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return msg_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneofMsg::release_string_value() {
  // @@protoc_insertion_point(field_release:OneofMsg.string_value)
  if (_internal_has_string_value()) {
    clear_has_msg();
    return msg_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void OneofMsg::set_allocated_string_value(std::string* string_value) {
  if (has_msg()) {
    clear_msg();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    msg_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:OneofMsg.string_value)
}

// .google.protobuf.Any any = 5;
inline bool OneofMsg::_internal_has_any() const {
  return msg_case() == kAny;
}
inline bool OneofMsg::has_any() const {
  return _internal_has_any();
}
inline void OneofMsg::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline PROTOBUF_NAMESPACE_ID::Any* OneofMsg::release_any() {
  // @@protoc_insertion_point(field_release:OneofMsg.any)
  if (_internal_has_any()) {
    clear_has_msg();
      PROTOBUF_NAMESPACE_ID::Any* temp = msg_.any_;
    msg_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& OneofMsg::_internal_any() const {
  return _internal_has_any()
      ? *msg_.any_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& OneofMsg::any() const {
  // @@protoc_insertion_point(field_get:OneofMsg.any)
  return _internal_any();
}
inline PROTOBUF_NAMESPACE_ID::Any* OneofMsg::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_msg();
    set_has_any();
    msg_.any_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(
        GetArenaNoVirtual());
  }
  return msg_.any_;
}
inline PROTOBUF_NAMESPACE_ID::Any* OneofMsg::mutable_any() {
  // @@protoc_insertion_point(field_mutable:OneofMsg.any)
  return _internal_mutable_any();
}

inline bool OneofMsg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void OneofMsg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline OneofMsg::MsgCase OneofMsg::msg_case() const {
  return OneofMsg::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestTwo

// map<string, .OneofMsg> k_v_item = 1;
inline int TestTwo::_internal_k_v_item_size() const {
  return k_v_item_.size();
}
inline int TestTwo::k_v_item_size() const {
  return _internal_k_v_item_size();
}
inline void TestTwo::clear_k_v_item() {
  k_v_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >&
TestTwo::_internal_k_v_item() const {
  return k_v_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >&
TestTwo::k_v_item() const {
  // @@protoc_insertion_point(field_map:TestTwo.k_v_item)
  return _internal_k_v_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >*
TestTwo::_internal_mutable_k_v_item() {
  return k_v_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::OneofMsg >*
TestTwo::mutable_k_v_item() {
  // @@protoc_insertion_point(field_mutable_map:TestTwo.k_v_item)
  return _internal_mutable_k_v_item();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fany_2eproto
