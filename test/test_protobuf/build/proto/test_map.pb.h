// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fmap_2eproto;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DataSet;
class DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
class MapTest;
class MapTestDefaultTypeInternal;
extern MapTestDefaultTypeInternal _MapTest_default_instance_;
class MapTest_MapItemEntry_DoNotUse;
class MapTest_MapItemEntry_DoNotUseDefaultTypeInternal;
extern MapTest_MapItemEntry_DoNotUseDefaultTypeInternal _MapTest_MapItemEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Data* Arena::CreateMaybeMessage<::Data>(Arena*);
template<> ::DataSet* Arena::CreateMaybeMessage<::DataSet>(Arena*);
template<> ::MapTest* Arena::CreateMaybeMessage<::MapTest>(Arena*);
template<> ::MapTest_MapItemEntry_DoNotUse* Arena::CreateMaybeMessage<::MapTest_MapItemEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fmap_2eproto);
    return ::descriptor_table_test_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string data_name = 1;
  void clear_data_name();
  const std::string& data_name() const;
  void set_data_name(const std::string& value);
  void set_data_name(std::string&& value);
  void set_data_name(const char* value);
  void set_data_name(const char* value, size_t size);
  std::string* mutable_data_name();
  std::string* release_data_name();
  void set_allocated_data_name(std::string* data_name);
  private:
  const std::string& _internal_data_name() const;
  void _internal_set_data_name(const std::string& value);
  std::string* _internal_mutable_data_name();
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fmap_2eproto;
};
// -------------------------------------------------------------------

class DataSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataSet) */ {
 public:
  DataSet();
  virtual ~DataSet();

  DataSet(const DataSet& from);
  DataSet(DataSet&& from) noexcept
    : DataSet() {
    *this = ::std::move(from);
  }

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSet& operator=(DataSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSet* internal_default_instance() {
    return reinterpret_cast<const DataSet*>(
               &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataSet& a, DataSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSet* New() const final {
    return CreateMaybeMessage<DataSet>(nullptr);
  }

  DataSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fmap_2eproto);
    return ::descriptor_table_test_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .Data data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data >*
      mutable_data();
  private:
  const ::Data& _internal_data(int index) const;
  ::Data* _internal_add_data();
  public:
  const ::Data& data(int index) const;
  ::Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data >&
      data() const;

  // @@protoc_insertion_point(class_scope:DataSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fmap_2eproto;
};
// -------------------------------------------------------------------

class MapTest_MapItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapTest_MapItemEntry_DoNotUse, 
    std::string, ::DataSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapTest_MapItemEntry_DoNotUse, 
    std::string, ::DataSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapTest_MapItemEntry_DoNotUse();
  MapTest_MapItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapTest_MapItemEntry_DoNotUse& other);
  static const MapTest_MapItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapTest_MapItemEntry_DoNotUse*>(&_MapTest_MapItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MapTest.MapItemEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fmap_2eproto);
    return ::descriptor_table_test_5fmap_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class MapTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapTest) */ {
 public:
  MapTest();
  virtual ~MapTest();

  MapTest(const MapTest& from);
  MapTest(MapTest&& from) noexcept
    : MapTest() {
    *this = ::std::move(from);
  }

  inline MapTest& operator=(const MapTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTest& operator=(MapTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapTest* internal_default_instance() {
    return reinterpret_cast<const MapTest*>(
               &_MapTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapTest& a, MapTest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTest* New() const final {
    return CreateMaybeMessage<MapTest>(nullptr);
  }

  MapTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapTest& from);
  void MergeFrom(const MapTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fmap_2eproto);
    return ::descriptor_table_test_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapItemFieldNumber = 1,
  };
  // map<string, .DataSet> map_item = 1;
  int map_item_size() const;
  private:
  int _internal_map_item_size() const;
  public:
  void clear_map_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >&
      _internal_map_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >*
      _internal_mutable_map_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >&
      map_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >*
      mutable_map_item();

  // @@protoc_insertion_point(class_scope:MapTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapTest_MapItemEntry_DoNotUse,
      std::string, ::DataSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// string data_name = 1;
inline void Data::clear_data_name() {
  data_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Data::data_name() const {
  // @@protoc_insertion_point(field_get:Data.data_name)
  return _internal_data_name();
}
inline void Data::set_data_name(const std::string& value) {
  _internal_set_data_name(value);
  // @@protoc_insertion_point(field_set:Data.data_name)
}
inline std::string* Data::mutable_data_name() {
  // @@protoc_insertion_point(field_mutable:Data.data_name)
  return _internal_mutable_data_name();
}
inline const std::string& Data::_internal_data_name() const {
  return data_name_.GetNoArena();
}
inline void Data::_internal_set_data_name(const std::string& value) {
  
  data_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Data::set_data_name(std::string&& value) {
  
  data_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.data_name)
}
inline void Data::set_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.data_name)
}
inline void Data::set_data_name(const char* value, size_t size) {
  
  data_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.data_name)
}
inline std::string* Data::_internal_mutable_data_name() {
  
  return data_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data::release_data_name() {
  // @@protoc_insertion_point(field_release:Data.data_name)
  
  return data_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_data_name(std::string* data_name) {
  if (data_name != nullptr) {
    
  } else {
    
  }
  data_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_name);
  // @@protoc_insertion_point(field_set_allocated:Data.data_name)
}

// uint32 id = 2;
inline void Data::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Data::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Data::id() const {
  // @@protoc_insertion_point(field_get:Data.id)
  return _internal_id();
}
inline void Data::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Data::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Data.id)
}

// -------------------------------------------------------------------

// DataSet

// repeated .Data data = 1;
inline int DataSet::_internal_data_size() const {
  return data_.size();
}
inline int DataSet::data_size() const {
  return _internal_data_size();
}
inline void DataSet::clear_data() {
  data_.Clear();
}
inline ::Data* DataSet::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:DataSet.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data >*
DataSet::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:DataSet.data)
  return &data_;
}
inline const ::Data& DataSet::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::Data& DataSet::data(int index) const {
  // @@protoc_insertion_point(field_get:DataSet.data)
  return _internal_data(index);
}
inline ::Data* DataSet::_internal_add_data() {
  return data_.Add();
}
inline ::Data* DataSet::add_data() {
  // @@protoc_insertion_point(field_add:DataSet.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data >&
DataSet::data() const {
  // @@protoc_insertion_point(field_list:DataSet.data)
  return data_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapTest

// map<string, .DataSet> map_item = 1;
inline int MapTest::_internal_map_item_size() const {
  return map_item_.size();
}
inline int MapTest::map_item_size() const {
  return _internal_map_item_size();
}
inline void MapTest::clear_map_item() {
  map_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >&
MapTest::_internal_map_item() const {
  return map_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >&
MapTest::map_item() const {
  // @@protoc_insertion_point(field_map:MapTest.map_item)
  return _internal_map_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >*
MapTest::_internal_mutable_map_item() {
  return map_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DataSet >*
MapTest::mutable_map_item() {
  // @@protoc_insertion_point(field_mutable_map:MapTest.map_item)
  return _internal_mutable_map_item();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fmap_2eproto
